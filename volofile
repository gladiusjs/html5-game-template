/*jslint regexp: true */
/*global define, console, process */

define(function (require) {
    'use strict';

    var amdify = require('amdify'),
        q = require('q'),
        crypto = require('crypto'),
        fs = require('fs'),
        path = require('path'),
        forGitHubPages = false,
        skipFlattenForGitHubPages = false;

    //Cleans up the
    function flattenForGitHubPages(v) {
        if (!forGitHubPages || skipFlattenForGitHubPages) {
            return;
        }

        //Move the contents of www-built to the top level
        fs.readdirSync('www-built').forEach(function (item) {
            var target = path.join('.', item);

            if (v.exists(target)) {
                v.rm(target);
            }

            v.mv(path.join('www-built', item), target);
        });

        //Remove the www-built directory, since it should not be committed
        //into the github branch.
        v.rm('www-built');
    }

    return {
      
        onCreate: {
          run: function (d, v, namedArgs) {
            return v.command('add', '-amdoff', 'toji/game-shim')
          } 
        },

        //Builds the JS and CSS into one file each. If you want to do
        //dynamic loading of scripts, pass -dynamic to the build, and
        //require.js will be used to load scripts.
        build: {
            flags: {
                //Does not print the build output.
                'q': 'quiet',
                //Uses dynamic loading via require.js instead of building
                //all the modules in with almond.
                'dynamic': 'dynamic'
            },

            run: function (d, v, namedArgs) {
                q.call(function () {
                    //Remove the old build.
                    if (v.exists('www-built')) {
                        v.rm('www-built');
                    }

                    if (!namedArgs.dynamic) {
                        //Copy the directory for output.
                        v.copyDir('www', 'www-built');

                        //Remove the js dir from the built area, will be
                        //replaced by an optimized app.js
                        v.rm('www-built/js');

                        //Do the CSS optimization
                        return v.spawn('node', ['tools/r.js', '-o',
                                                'cssIn=www/css/app.css',
                                                'out=www-built/css/app.css'], {
                            useConsole: !namedArgs.quiet
                        });
                    }
                    return undefined;
                })
                .then(function () {
                    //JS go time
                    var optimize = namedArgs.optimize || 'uglify';

                    if (namedArgs.dynamic) {
                        //Still use require.js to load the app.js file.
                        return v.spawn('node', ['tools/r.js', '-o',
                                        'appDir=www',
                                        'baseUrl=js/lib',
                                        'paths.app=../app',
                                        'name=app',
                                        'dir=www-built',
                                        'optimize=' + optimize], {
                            useConsole: !namedArgs.quiet
                        });
                    } else {
                        //The all-in-one option.
                        return v.spawn('node', ['tools/r.js', '-o',
                                        'baseUrl=www/js/lib',
                                        'paths.app=../app',
                                        'paths.almond=../../../tools/almond',
                                        'name=almond',
                                        'include=app',
                                        'out=www-built/js/app.js',
                                        'optimize=' + optimize], {
                            useConsole: !namedArgs.quiet
                        });
                    }
                })
                .then(function (buildOutput) {
                    //Remove all the CSS except for the app.css, since it
                    //inlines all the other ones.
                    v.getFilteredFileList('www-built/css').forEach(function (path) {
                        if (!/app\.css$/.test(path)) {
                            v.rm(path);
                        }
                    });

                    //If almond is in use, it is built into app.js, so need
                    //to update the script tag to just load app.js instead.
                    if (!namedArgs.dynamic) {
                        var indexName = 'www-built/index.html',
                            contents = v.read(indexName),
                            scriptRegExp = /(<script[^>]+data-main="[^"]+"[^>]+)(src="[^"]+")([^>]+>\s*<\/script>)/;

                        contents = contents.replace(scriptRegExp,
                            function (match, pre, script, post) {
                            return pre + 'src="js/app.js"' + post;
                        });

                        v.write(indexName, contents);
                    }
                    return buildOutput;
                })
                .then(function (buildOutput) {
                    flattenForGitHubPages(v);
                    return buildOutput;
                })
                .then(function (buildOutput) {
                    d.resolve(buildOutput);
                }, d.reject);
            }
        },

        //Generates an SHA1 digest that represents the contents of the
        //a directory. Call it like so: "volo digest dir=path/to/directory"
        digest: {
            validate: function (namedArgs) {
                var dir = namedArgs.dir;
                if (!dir) {
                    return new Error('Please specify a target directory for ' +
                                     'the digest');
                }
                if (!path.existsSync(dir)) {
                    return new Error('Target directory for digest does ' +
                                     'not exist: ' + dir);
                }
                return undefined;
            },

            run: function (d, v, namedArgs) {
                var dir = namedArgs.dir,
                    files = v.getFilteredFileList(dir),
                    digests = [],
                    i = 0;

                function getDigest(fileName) {
                    var shaSum = crypto.createHash('sha1'),
                        d = q.defer(),
                        stream = fs.ReadStream(fileName);

                    stream.on('data', function(data) {
                        shaSum.update(data);
                    });

                    stream.on('end', function() {
                        d.resolve(shaSum.digest('base64'));
                    });

                    return d.promise;
                }

                function digestFile(fileName) {
                    getDigest(fileName).then(function (digest) {
                        var shaSum;

                        digests[i] = digest;
                        i += 1;

                        if (i < files.length) {
                            digestFile(files[i]);
                        } else {
                            //All done, now generate the final digest,
                            //using the combination of the other digests
                            shaSum = crypto.createHash('sha1');
                            shaSum.update(digests.join(','));
                            d.resolve(shaSum.digest('base64'));
                        }
                    });
                }

                digestFile(files[0]);
            }
        },

        appcache: function (d, v, namedArgs) {
            var hasBuilt = v.exists('www-built');

            //Delay the flattening until later.
            skipFlattenForGitHubPages = true;

            v.command('build')
            .then(function () {
                var manifest = v.read('./tools/manifest.appcache'),
                    master = v.read('./www-built/index.html'),
                    appFiles;

                //Reset skipFlatten flag
                skipFlattenForGitHubPages = false;

                appFiles = v.getFilteredFileList('www-built');
                appFiles = appFiles.map(function (file) {
                    var start = file.indexOf('/www-built/');
                    start = (start !== -1) ? (start + 11) : 0;
                    return file.substr(start, file.length);
                });

                master = master
                        .replace(/<html\s?/, '<html manifest="manifest.appcache" ')
                        .replace(/manifest\.appcache"\s>/, 'manifest.appcache">');
                v.write('www-built/index.html', master);

                return v.command('digest', 'dir=www-built')
                .then(function (stamp) {
                    manifest = v.template(manifest, {
                        files : appFiles.join('\n'),
                        stamp : stamp
                    });
                    v.write('www-built/manifest.appcache', manifest);
                });
            })
            .then(function () {
                flattenForGitHubPages(v);
            })
            .then(function () {
                //Inform the user of the right mime type, but only do it if
                //there was not a previous build done.
                d.resolve(hasBuilt ? '': 'Be sure to set the mime type for ' +
                          '.appcache files to be: text/cache-manifest');
            })
            .fail(d.reject);
        }
    };
});
